<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>RRR — Search & Add</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body { background-color: #f8f9fa; }
    .thumb-placeholder {
      width: 100%; aspect-ratio: 3 / 4;
      display:flex; align-items:center; justify-content:center;
      background:#e9ecef; color:#6c757d; border-radius:.375rem;
      font-size: .875rem;
    }
    .thumb-img { width:100%; aspect-ratio:3/4; object-fit:cover; border-radius:.375rem; cursor:pointer; }
    .result-card:hover { transform: translateY(-3px); transition: .2s; }
    .toast-container { z-index: 1080; }
  </style>
</head>
<body>

  <div class="container py-4">
    <div class="card shadow-sm">
      <div class="card-body">
        <h1 class="h4 mb-4">RRR — Search & Add</h1>

        <div class="input-group mb-3">
  <input id="query" type="text" class="form-control form-control-lg" placeholder="Search movie or series..." aria-label="Search" />
  <select id="searchType" class="form-select" style="max-width:140px">
    <option value="name">Name</option>
    <option value="tmdb">TMDB ID</option>
    <option value="imdb">IMDB ID</option>
  </select>
</div>


        <div class="d-flex flex-wrap gap-2 mb-4">
          <button id="searchMovie" class="btn btn-primary flex-fill">Search Movie</button>
          <button id="searchSeries" class="btn btn-success flex-fill">Search Series</button>
        </div>

        <!-- Root/profile selectors -->
        <div id="metaArea" class="row g-3 mb-4 d-none">
          <div class="col-12 col-md-6">
            <label class="form-label fw-semibold">Radarr Root</label>
            <select id="radarrRoot" class="form-select"></select>
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label fw-semibold">Radarr Profile</label>
            <select id="radarrProfile" class="form-select"></select>
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label fw-semibold">Sonarr Root</label>
            <select id="sonarrRoot" class="form-select"></select>
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label fw-semibold">Sonarr Profile</label>
            <select id="sonarrProfile" class="form-select"></select>
          </div>
        </div>

        <!-- Results grid -->
        <div id="results" class="row g-3"></div>
      </div>
    </div>
  </div>

  <!-- Confirm Modal -->
  <div class="modal fade" id="confirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Confirm Add</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body d-flex gap-3">
          <img id="confirmImg" class="rounded" style="width:90px;height:120px;object-fit:cover" src="" alt="">
          <div>
            <div id="confirmTitle" class="fw-semibold"></div>
            <div id="confirmMeta" class="small text-muted"></div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button id="confirmAdd" type="button" class="btn btn-primary">Add</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Image Modal (lightbox) -->
  <div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content bg-transparent border-0">
        <img id="lightboxImg" class="rounded shadow-lg img-fluid" src="" alt="">
      </div>
    </div>
  </div>

  <!-- Toast Container -->
  <div class="toast-container position-fixed bottom-0 end-0 p-3"></div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

  <script>
  const API_BASE = '/';
  let currentAddPayload = null;

  function makeImageUrl(img) {
    if (!img) return null;
    if (typeof img !== 'string') img = String(img);
    if (img.startsWith('http')) return img;
    if (img.startsWith('/')) return 'https://image.tmdb.org/t/p/w300' + img;
    return img;
  }

  async function fetchMeta() {
    try {
      const rad = await (await fetch(`${API_BASE}api/radarr/meta`)).json();
      const son = await (await fetch(`${API_BASE}api/sonarr/meta`)).json();
      fillSelect('radarrRoot', rad.rootFolders, 'path', '/movies');
      fillSelect('radarrProfile', rad.qualityProfiles, 'id', 'Default');
      fillSelect('sonarrRoot', son.rootFolders, 'path', '/tv');
      fillSelect('sonarrProfile', son.qualityProfiles, 'id', 'Default');
      document.getElementById('metaArea').classList.remove('d-none');
    } catch (e) { console.error(e); }
  }
  function fillSelect(id, arr, key, fallback) {
    const el = document.getElementById(id);
    if (!arr || !arr.length) { el.innerHTML = `<option>${fallback}</option>`; return; }
    el.innerHTML = arr.map(o => `<option value="${o[key]}">${o.name || o.path || o[key]}</option>`).join('');
  }

async function search(endpointKind) {
    const q = document.getElementById('query').value.trim();
    const type = document.getElementById('searchType').value; // name|tmdb|imdb
    if (!q) return alert('Enter query');

    let url = '';
    let body = {};

    // decide endpoint for movies or series
    if (endpointKind === 'movie') {
      if (type === 'name') { url = '/api/search/movie'; body = { query: q }; }
      else if (type === 'tmdb') { url = '/api/search/movieByTmdb'; body = { tmdbId: q }; }
      else if (type === 'imdb') { url = '/api/search/movieByImdb'; body = { imdbId: q }; }
    } else { // series
      if (type === 'name') { url = '/api/search/series'; body = { query: q }; }
      else if (type === 'tmdb') { url = '/api/search/seriesByTmdb'; body = { tmdbId: q }; }
      else if (type === 'imdb') { url = '/api/search/seriesByImdb'; body = { imdbId: q }; }
    }

    // call backend
    try {
      const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });
      const data = await res.json();
      // pass an endpoint-like string so renderResults can decide which add flow to use
      renderResults(data, endpointKind === 'movie' ? 'search/movie' : 'search/series');
    } catch (e) {
      console.error(e);
      showToast('Search failed — check server logs.', 'danger');
    }
  }

  function renderResults(list, endpoint) {
    const container = document.getElementById('results');
    container.innerHTML = '';
    if (!list || !list.length) {
      container.innerHTML = '<div class="col-12"><div class="alert alert-secondary">No results found.</div></div>';
      return;
    }

    list.forEach(item => {
      const title = item.title || 'Unknown';
      const imgSrc = makeImageUrl(item.images?.[0] || item.imageUrl);
      const overview = item.overview ? item.overview.slice(0,200) + (item.overview.length>200?'...':'') : '';

      const col = document.createElement('div');
      col.className = 'col-12 col-md-6 col-lg-4';

      const card = document.createElement('div');
      card.className = 'card h-100 result-card border-0 shadow-sm';
      card.innerHTML = `
        <div class="p-2">
          ${imgSrc ? `<img src="${imgSrc}" class="thumb-img" alt="${title}">`
                    : `<div class="thumb-placeholder">No image</div>`}
        </div>
        <div class="card-body d-flex flex-column">
          <h6 class="card-title">${title}</h6>
          <p class="card-text small text-muted flex-grow-1">${overview}</p>
          <div class="d-flex gap-2 mt-2">
            ${imgSrc ? `<button class="btn btn-outline-secondary btn-sm flex-fill" data-img="${imgSrc}">Preview</button>` : ''}
            <button class="btn btn-primary btn-sm flex-fill" data-add="true">Add</button>
          </div>
        </div>`;
      col.appendChild(card);
      container.appendChild(col);

      // handlers
      if (imgSrc) card.querySelector('[data-img]').onclick = () => openLightbox(imgSrc);
      card.querySelector('[data-add]').onclick = () => openConfirm(endpoint, item);
    });
  }

  function openLightbox(src) {
    const img = document.getElementById('lightboxImg');
    img.src = src;
    new bootstrap.Modal('#imageModal').show();
  }

  function openConfirm(endpoint, item) {
    const modalEl = document.getElementById('confirmModal');
    const titleEl = document.getElementById('confirmTitle');
    const metaEl = document.getElementById('confirmMeta');
    const imgEl = document.getElementById('confirmImg');

    const root = endpoint === 'search/movie' ? document.getElementById('radarrRoot').value : document.getElementById('sonarrRoot').value;
    const profile = endpoint === 'search/movie' ? document.getElementById('radarrProfile').value : document.getElementById('sonarrProfile').value;
    const title = item.title || 'Unknown';
    const id = item.tmdbId || item.tvdbId || item.imdbId || '';

    titleEl.innerText = title;
    metaEl.innerText = `${id ? 'id: '+id+' • ' : ''}Root: ${root} • Profile: ${profile}`;
    const imgSrc = makeImageUrl(item.images?.[0] || item.imageUrl);
    imgEl.src = imgSrc || '';
    imgEl.style.display = imgSrc ? 'block' : 'none';

    currentAddPayload = { endpoint, item, root, profile };
    new bootstrap.Modal(modalEl).show();
  }

  document.getElementById('confirmAdd').onclick = async () => {
    if (!currentAddPayload) return;
    const { endpoint, item, root, profile } = currentAddPayload;
    const modal = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
    modal.hide();
    try {
      let res;
      if (endpoint === 'search/movie') {
        const payload = { tmdbId:item.tmdbId, title:item.title, rootFolderPath:root, qualityProfileId:profile };
        res = await (await fetch('/api/add/movie', {method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)})).json();
      } else {
        const payload = { tvdbId:item.tvdbId, imdbId:item.imdbId, title:item.title, rootFolderPath:root, qualityProfileId:profile };
        res = await (await fetch('/api/add/series', {method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)})).json();
      }
      const msg = res.added ? '✅ Added successfully' : (res.reason==='exists'?'ℹ️ Already exists':'❌ Failed');
      showToast(msg, res.added?'success':(res.reason==='exists'?'warning':'danger'));
    } catch (e) {
      console.error(e);
      showToast('Add failed — check logs.', 'danger');
    }
  };

  function showToast(text, type='info') {
    const wrap = document.createElement('div');
    wrap.className = `toast align-items-center text-bg-${type} border-0 show mb-2`;
    wrap.role = 'alert';
    wrap.innerHTML = `<div class="d-flex"><div class="toast-body">${text}</div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button></div>`;
    document.querySelector('.toast-container').appendChild(wrap);
    setTimeout(()=>wrap.remove(),4000);
  }

   document.getElementById('searchMovie').onclick = ()=>search('movie');
  document.getElementById('searchSeries').onclick = ()=>search('series');
  fetchMeta();
  </script>
</body>
</html>
